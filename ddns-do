#!/usr/bin/env bash

declare -r DATE_FORMAT="%Y-%m-%d %H:%M:%S"
declare -r VERSION="1.0.0"
declare ttl=${DDNS_DO_TTL:-300}
declare record_type="${DDNS_DO_TYPE:-A}"
declare domain="$DDNS_DO_DOMAIN"
declare record="$DDNS_DO_RECORD"
declare handler_script="$DDNS_DO_SCRIPT"
declare old_ip ip

function errlog() {
  echo "$@" >&2
}

function log() {
  echo "$@"
}

function usage() {
  cat <<HELP
Usage: $(basename "$0") [OPTIONS]

Dynamic DNS updater using Digital Ocean Domains.

Options:
  -d, --domain <DOMAIN>         Digital Ocean Domain (required)
  -r, --record <RECORD>   Digital Ocean domain record name (required)
  -t, --ttl <SECONDS>             TTL for DNS record
  -y, --type <TYPE>               DNS record type
  -i, --ip <IP_ADDRESS>           Force usage of IP address
  -s, --script <SCRIPT_PATH>      Path to script to execute on change
  -h, --help                      You're looking at it
  -v, --version                   Print version and exit
HELP
}

function valid-ip() {
  local ip=$1 octets
  if [[ "$ip" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
    IFS='.' read -r -a octets <<< "$ip"
    for octet in $octets; do
      (( octet <= 255 )) || return 1
    done
  fi
  return 0
}

function fetch-current-ip() {
  doctl compute domain records list "$domain" --no-header --format Name,Type,Data | \
    awk -F " " '{ if ($1 == "'$record'" && $2 == "'$record_type'") { print $3; exit }}'
}

function init-args() {
  while (( $# > 0 )); do
    case "$1" in
      -d|--domain) domain="$2"; shift ;;
      -r|--record) record="$2"; shift ;;
      -i|--ip) ip="$2"; shift ;;
      -t|--ttl) ttl="$2"; shift ;;
      -y|--type) record_type="$2"; shift ;;
      -s|--script) handler_script="$2"; shift ;;
      -h|--help) usage; exit 0 ;;
      -v|--version) echo "$VERSION"; exit 0 ;;
      *) errlog "Unknown option: $1"; usage; exit 1 ;;
    esac
    shift
  done
  if [[ -z "$ip" ]]; then
    ip="$(dig +short -4 myip.opendns.com @resolver1.opendns.com)"
  fi
  old_ip="$(fetch-current-ip 2> /dev/null)"
  return 0
}

function validate-args() {
  if [[ -z "$domain" ]]; then
    errlog "Missing -d or --domain or \$DDNS_DO_DOMAIN"
    return 1
  elif [[ -z "$record" ]]; then
    errlog "Missing -r or --record or \$DDNS_DO_RECORD"
    return 1
  elif [[ -n "$handler_script" && ! -x "$handler_script" ]]; then
    errlog "Script at '$handler_script' is not executable"
    return 1
  elif [[ -z "$ip" ]]; then
    errlog "Unable to determine current IP address"
    return 1
  fi
  return 0
}

function update-dns-entry() {
  local ip=$1

  local existingId="$(doctl compute domain records list "$domain" --no-header --format Name,Type,ID | \
    awk -F " " '{ if ($1 == "'$record'" && $2 == "'$record_type'") { print $3; exit }}')"

  if [[ -n "$existingId" ]]; then
  	output="$(doctl compute domain records update "$domain" --record-id "$existingId" --record-type "$record_type" --record-ttl "$ttl" --record-name "$record" --record-data "$ip")"
	else
		output="$(doctl compute domain records create "$domain" --record-type "$record_type" --record-ttl "$ttl" --record-name "$record" --record-data "$ip")"
	fi

  success=$?
  if (( success == 0 )); then
    log "$output"
  else
    errlog "Failed to update DNS entry:"
    errlog "$output"
  fi
  return $success
}

function run-handler-script() {
  local old_ip=$1 new_ip=$2
  [[ -z "$handler_script" ]] || "$handler_script" "$old_ip" "$new_ip"
}

function main() {
  init-args "$@"
  validate-args || exit 1
  if ! valid-ip "$ip"; then
    log "Invalid IP address: '$ip'"
    exit 1
  fi
  if [[ "$old_ip" != "$ip" ]]; then
    log "IP changed from '$old_ip' to '$ip', updating entry"
    update-dns-entry "$ip" && run-handler-script "$old_ip" "$ip"
  else
    log "Current IP == $ip"
  fi
  exit $?
}

main "$@"
